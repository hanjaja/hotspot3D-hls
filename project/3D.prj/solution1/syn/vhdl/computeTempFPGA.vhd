-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity computeTempFPGA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pIn : IN STD_LOGIC_VECTOR (31 downto 0);
    tIn_i : IN STD_LOGIC_VECTOR (31 downto 0);
    tIn_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    tIn_o_ap_vld : OUT STD_LOGIC;
    tOut_i : IN STD_LOGIC_VECTOR (31 downto 0);
    tOut_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    tOut_o_ap_vld : OUT STD_LOGIC;
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    nz : IN STD_LOGIC_VECTOR (31 downto 0);
    Cap : IN STD_LOGIC_VECTOR (31 downto 0);
    Rx : IN STD_LOGIC_VECTOR (31 downto 0);
    Ry : IN STD_LOGIC_VECTOR (31 downto 0);
    Rz : IN STD_LOGIC_VECTOR (31 downto 0);
    dt : IN STD_LOGIC_VECTOR (31 downto 0);
    numiter : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of computeTempFPGA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "computeTempFPGA_computeTempFPGA,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.612000,HLS_SYN_LAT=576716993,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3303,HLS_SYN_LUT=2547,HLS_VERSION=2020_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (89 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (89 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (89 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (89 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (89 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (89 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (89 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (89 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (89 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (89 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (89 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (89 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_42A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4008000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_281 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tIn_addr_035_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stepDivCap_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal cw_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cs_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv4_reg_457 : STD_LOGIC_VECTOR (63 downto 0);
    signal cb_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul5_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln47_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal bound_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cc_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_515 : STD_LOGIC_VECTOR (95 downto 0);
    signal i_1_fu_356_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_520 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal add_ln30_fu_362_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln30_reg_526 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal bitcast_ln47_1_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_1_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln47_2_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_2_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal mul13_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal add5927_fu_391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5927_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal tOut_addr_034_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal icmp_ln54_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten11_reg_219 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal bitcast_ln47_3_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal bound_fu_337_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (89 downto 0);
    signal bound_fu_337_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_337_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_350_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_350_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component computeTempFPGA_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component computeTempFPGA_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component computeTempFPGA_fdiv_32ns_32ns_32_10_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component computeTempFPGA_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component computeTempFPGA_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeTempFPGA_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeTempFPGA_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeTempFPGA_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeTempFPGA_mul_32ns_64ns_96_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component computeTempFPGA_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_230_p0,
        din1 => grp_fu_230_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_230_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component computeTempFPGA_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        din1 => grp_fu_234_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component computeTempFPGA_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        din1 => grp_fu_239_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U4 : component computeTempFPGA_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U5 : component computeTempFPGA_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => stepDivCap_reg_423,
        din1 => Ry,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    fptrunc_64ns_32_2_no_dsp_1_U6 : component computeTempFPGA_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_292,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p1);

    fpext_32ns_64_2_no_dsp_1_U7 : component computeTempFPGA_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p1);

    fpext_32ns_64_2_no_dsp_1_U8 : component computeTempFPGA_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cs_reg_451,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p1);

    dadddsub_64ns_64ns_64_5_full_dsp_1_U9 : component computeTempFPGA_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        opcode => grp_fu_265_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U10 : component computeTempFPGA_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_281,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U11 : component computeTempFPGA_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv4_reg_457,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    mul_32ns_32ns_64_1_1_U12 : component computeTempFPGA_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => bound_fu_337_p0,
        din1 => bound_fu_337_p1,
        dout => bound_fu_337_p2);

    mul_32ns_64ns_96_2_1_U13 : component computeTempFPGA_mul_32ns_64ns_96_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                i_reg_208 <= i_1_reg_520;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_reg_208 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                indvar_flatten11_reg_219 <= add_ln30_reg_526;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten11_reg_219 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    tIn_addr_035_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                tIn_addr_035_reg_194 <= tOut_addr_034_reg_182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                tIn_addr_035_reg_194 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    tOut_addr_034_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                tOut_addr_034_reg_182 <= tIn_addr_035_reg_194;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                tOut_addr_034_reg_182 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                add5927_reg_558 <= add5927_fu_391_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln30_reg_526 <= add_ln30_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                bitcast_ln47_1_reg_534 <= bitcast_ln47_1_fu_373_p1;
                bitcast_ln47_2_reg_541 <= bitcast_ln47_2_fu_379_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                bound4_reg_515 <= grp_fu_350_p2;
                cc_reg_500 <= grp_fu_256_p1;
                mul1_reg_505 <= grp_fu_234_p2;
                mul2_reg_510 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                bound_reg_480 <= bound_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                cb_reg_462 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                conv4_reg_457 <= grp_fu_262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                cs_reg_451 <= grp_fu_250_p2;
                cw_reg_445 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                empty_reg_548 <= empty_fu_385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_1_reg_520 <= i_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                mul13_reg_553 <= grp_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                mul5_reg_470 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_281 <= grp_fu_259_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_286 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_292 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state49) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then
                reg_299 <= grp_fu_234_p2;
                reg_304 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then
                reg_309 <= grp_fu_234_p2;
                reg_314 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then
                reg_319 <= grp_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                stepDivCap_reg_423 <= grp_fu_243_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state46, icmp_ln30_fu_368_p2, ap_CS_fsm_state90, icmp_ln54_fu_408_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state90 => 
                if (((icmp_ln54_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add5927_fu_391_p3 <= 
        grp_fu_230_p2 when (tIn_addr_035_reg_194(0) = '1') else 
        grp_fu_230_p2;
    add_ln30_fu_362_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_219) + unsigned(ap_const_lv96_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);

    ap_done_assign_proc : process(ap_CS_fsm_state90, icmp_ln54_fu_408_p2)
    begin
        if (((icmp_ln54_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state90, icmp_ln54_fu_408_p2)
    begin
        if (((icmp_ln54_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln47_1_fu_373_p1 <= tIn_i;
    bitcast_ln47_2_fu_379_p1 <= tOut_i;
    bitcast_ln47_3_fu_399_p1 <= grp_fu_230_p2;
    bitcast_ln47_fu_324_p1 <= pIn;
    bound_fu_337_p0 <= bound_fu_337_p00(32 - 1 downto 0);
    bound_fu_337_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ny),64));
    bound_fu_337_p1 <= bound_fu_337_p10(32 - 1 downto 0);
    bound_fu_337_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nx),64));
    empty_fu_385_p3 <= 
        bitcast_ln47_1_reg_534 when (tIn_addr_035_reg_194(0) = '1') else 
        bitcast_ln47_2_reg_541;

    grp_fu_230_p0_assign_proc : process(reg_299, tIn_addr_035_reg_194, ap_CS_fsm_state50, reg_319, add5927_reg_558, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state80, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_230_p0 <= add5927_reg_558;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_230_p0 <= reg_319;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_230_p0 <= reg_299;
        else 
            grp_fu_230_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_230_p1_assign_proc : process(tIn_addr_035_reg_194, reg_304, reg_309, ap_CS_fsm_state50, reg_314, mul1_reg_505, mul2_reg_510, mul13_reg_553, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state80, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_230_p1 <= mul1_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_230_p1 <= mul2_reg_510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_230_p1 <= mul13_reg_553;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state70) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_230_p1 <= reg_314;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state65) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_230_p1 <= reg_309;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state55) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (tIn_addr_035_reg_194 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_230_p1 <= reg_304;
        else 
            grp_fu_230_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_234_p0_assign_proc : process(tIn_addr_035_reg_194, cb_reg_462, ap_CS_fsm_state41, ap_CS_fsm_state46, bitcast_ln47_1_fu_373_p1, bitcast_ln47_1_reg_534, icmp_ln30_fu_368_p2, bitcast_ln47_2_fu_379_p1, bitcast_ln47_2_reg_541, empty_reg_548, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_234_p0 <= empty_reg_548;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_0))) then 
            grp_fu_234_p0 <= bitcast_ln47_2_reg_541;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_1))) then 
            grp_fu_234_p0 <= bitcast_ln47_1_reg_534;
        elsif (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_0))) then 
            grp_fu_234_p0 <= bitcast_ln47_2_fu_379_p1;
        elsif (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_1))) then 
            grp_fu_234_p0 <= bitcast_ln47_1_fu_373_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_234_p0 <= cb_reg_462;
        else 
            grp_fu_234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_234_p1_assign_proc : process(tIn_addr_035_reg_194, cw_reg_445, cb_reg_462, ap_CS_fsm_state41, cc_reg_500, ap_CS_fsm_state46, icmp_ln30_fu_368_p2, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_234_p1 <= cb_reg_462;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_234_p1 <= cw_reg_445;
        elsif ((((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_234_p1 <= cc_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_234_p1 <= ap_const_lv32_42A00000;
        else 
            grp_fu_234_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p0_assign_proc : process(tIn_addr_035_reg_194, stepDivCap_reg_423, ap_CS_fsm_state41, ap_CS_fsm_state46, bitcast_ln47_1_fu_373_p1, bitcast_ln47_1_reg_534, icmp_ln30_fu_368_p2, bitcast_ln47_2_fu_379_p1, bitcast_ln47_2_reg_541, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_0))) then 
            grp_fu_239_p0 <= bitcast_ln47_2_reg_541;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_1))) then 
            grp_fu_239_p0 <= bitcast_ln47_1_reg_534;
        elsif (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_0))) then 
            grp_fu_239_p0 <= bitcast_ln47_2_fu_379_p1;
        elsif (((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_1))) then 
            grp_fu_239_p0 <= bitcast_ln47_1_fu_373_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_239_p0 <= stepDivCap_reg_423;
        else 
            grp_fu_239_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p1_assign_proc : process(tIn_addr_035_reg_194, cs_reg_451, cb_reg_462, bitcast_ln47_fu_324_p1, ap_CS_fsm_state41, ap_CS_fsm_state46, icmp_ln30_fu_368_p2, ap_CS_fsm_state47)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_239_p1 <= cb_reg_462;
        elsif ((((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_0)) or ((icmp_ln30_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46) and (tIn_addr_035_reg_194 = ap_const_lv1_1)))) then 
            grp_fu_239_p1 <= cs_reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_239_p1 <= bitcast_ln47_fu_324_p1;
        else 
            grp_fu_239_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p0_assign_proc : process(ap_CS_fsm_state1, dt, stepDivCap_reg_423, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_243_p0 <= stepDivCap_reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_243_p0 <= dt;
        else 
            grp_fu_243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p1_assign_proc : process(ap_CS_fsm_state1, Cap, Rx, Rz, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_243_p1 <= Rz;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_243_p1 <= Rx;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_243_p1 <= Cap;
        else 
            grp_fu_243_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p0_assign_proc : process(cw_reg_445, cb_reg_462, ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_259_p0 <= cb_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_259_p0 <= cw_reg_445;
        else 
            grp_fu_259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_265_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_265_opcode <= ap_const_lv2_0;
        else 
            grp_fu_265_opcode <= "XX";
        end if; 
    end process;


    grp_fu_265_p0_assign_proc : process(reg_286, reg_292, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_265_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_265_p0 <= reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_265_p0 <= reg_286;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_p1_assign_proc : process(reg_286, reg_292, mul5_reg_470, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_265_p1 <= reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_265_p1 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_265_p1 <= mul5_reg_470;
        else 
            grp_fu_265_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_270_p1 <= ap_const_lv64_4008000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_270_p1 <= ap_const_lv64_4000000000000000;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_350_p0 <= grp_fu_350_p00(32 - 1 downto 0);
    grp_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nz),96));
    grp_fu_350_p1 <= grp_fu_350_p10(64 - 1 downto 0);
    grp_fu_350_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_reg_480),96));
    i_1_fu_356_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv31_1));
    icmp_ln30_fu_368_p2 <= "1" when (indvar_flatten11_reg_219 = bound4_reg_515) else "0";
    icmp_ln54_fu_408_p2 <= "1" when (signed(zext_ln27_fu_405_p1) < signed(numiter)) else "0";

    tIn_o_assign_proc : process(tIn_i, tOut_addr_034_reg_182, ap_CS_fsm_state89, bitcast_ln47_3_fu_399_p1)
    begin
        if (((tOut_addr_034_reg_182 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            tIn_o <= bitcast_ln47_3_fu_399_p1;
        else 
            tIn_o <= tIn_i;
        end if; 
    end process;


    tIn_o_ap_vld_assign_proc : process(tOut_addr_034_reg_182, ap_CS_fsm_state89)
    begin
        if (((tOut_addr_034_reg_182 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            tIn_o_ap_vld <= ap_const_logic_1;
        else 
            tIn_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tOut_o_assign_proc : process(tOut_i, tOut_addr_034_reg_182, ap_CS_fsm_state89, bitcast_ln47_3_fu_399_p1)
    begin
        if (((tOut_addr_034_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            tOut_o <= bitcast_ln47_3_fu_399_p1;
        else 
            tOut_o <= tOut_i;
        end if; 
    end process;


    tOut_o_ap_vld_assign_proc : process(tOut_addr_034_reg_182, ap_CS_fsm_state89)
    begin
        if (((tOut_addr_034_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            tOut_o_ap_vld <= ap_const_logic_1;
        else 
            tOut_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln27_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_520),32));
end behav;
