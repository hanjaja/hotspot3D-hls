// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="computeTempFPGA_computeTempFPGA,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.612000,HLS_SYN_LAT=576716993,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3303,HLS_SYN_LUT=2547,HLS_VERSION=2020_2_2}" *)

module computeTempFPGA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pIn,
        tIn_i,
        tIn_o,
        tIn_o_ap_vld,
        tOut_i,
        tOut_o,
        tOut_o_ap_vld,
        nx,
        ny,
        nz,
        Cap,
        Rx,
        Ry,
        Rz,
        dt,
        numiter
);

parameter    ap_ST_fsm_state1 = 90'd1;
parameter    ap_ST_fsm_state2 = 90'd2;
parameter    ap_ST_fsm_state3 = 90'd4;
parameter    ap_ST_fsm_state4 = 90'd8;
parameter    ap_ST_fsm_state5 = 90'd16;
parameter    ap_ST_fsm_state6 = 90'd32;
parameter    ap_ST_fsm_state7 = 90'd64;
parameter    ap_ST_fsm_state8 = 90'd128;
parameter    ap_ST_fsm_state9 = 90'd256;
parameter    ap_ST_fsm_state10 = 90'd512;
parameter    ap_ST_fsm_state11 = 90'd1024;
parameter    ap_ST_fsm_state12 = 90'd2048;
parameter    ap_ST_fsm_state13 = 90'd4096;
parameter    ap_ST_fsm_state14 = 90'd8192;
parameter    ap_ST_fsm_state15 = 90'd16384;
parameter    ap_ST_fsm_state16 = 90'd32768;
parameter    ap_ST_fsm_state17 = 90'd65536;
parameter    ap_ST_fsm_state18 = 90'd131072;
parameter    ap_ST_fsm_state19 = 90'd262144;
parameter    ap_ST_fsm_state20 = 90'd524288;
parameter    ap_ST_fsm_state21 = 90'd1048576;
parameter    ap_ST_fsm_state22 = 90'd2097152;
parameter    ap_ST_fsm_state23 = 90'd4194304;
parameter    ap_ST_fsm_state24 = 90'd8388608;
parameter    ap_ST_fsm_state25 = 90'd16777216;
parameter    ap_ST_fsm_state26 = 90'd33554432;
parameter    ap_ST_fsm_state27 = 90'd67108864;
parameter    ap_ST_fsm_state28 = 90'd134217728;
parameter    ap_ST_fsm_state29 = 90'd268435456;
parameter    ap_ST_fsm_state30 = 90'd536870912;
parameter    ap_ST_fsm_state31 = 90'd1073741824;
parameter    ap_ST_fsm_state32 = 90'd2147483648;
parameter    ap_ST_fsm_state33 = 90'd4294967296;
parameter    ap_ST_fsm_state34 = 90'd8589934592;
parameter    ap_ST_fsm_state35 = 90'd17179869184;
parameter    ap_ST_fsm_state36 = 90'd34359738368;
parameter    ap_ST_fsm_state37 = 90'd68719476736;
parameter    ap_ST_fsm_state38 = 90'd137438953472;
parameter    ap_ST_fsm_state39 = 90'd274877906944;
parameter    ap_ST_fsm_state40 = 90'd549755813888;
parameter    ap_ST_fsm_state41 = 90'd1099511627776;
parameter    ap_ST_fsm_state42 = 90'd2199023255552;
parameter    ap_ST_fsm_state43 = 90'd4398046511104;
parameter    ap_ST_fsm_state44 = 90'd8796093022208;
parameter    ap_ST_fsm_state45 = 90'd17592186044416;
parameter    ap_ST_fsm_state46 = 90'd35184372088832;
parameter    ap_ST_fsm_state47 = 90'd70368744177664;
parameter    ap_ST_fsm_state48 = 90'd140737488355328;
parameter    ap_ST_fsm_state49 = 90'd281474976710656;
parameter    ap_ST_fsm_state50 = 90'd562949953421312;
parameter    ap_ST_fsm_state51 = 90'd1125899906842624;
parameter    ap_ST_fsm_state52 = 90'd2251799813685248;
parameter    ap_ST_fsm_state53 = 90'd4503599627370496;
parameter    ap_ST_fsm_state54 = 90'd9007199254740992;
parameter    ap_ST_fsm_state55 = 90'd18014398509481984;
parameter    ap_ST_fsm_state56 = 90'd36028797018963968;
parameter    ap_ST_fsm_state57 = 90'd72057594037927936;
parameter    ap_ST_fsm_state58 = 90'd144115188075855872;
parameter    ap_ST_fsm_state59 = 90'd288230376151711744;
parameter    ap_ST_fsm_state60 = 90'd576460752303423488;
parameter    ap_ST_fsm_state61 = 90'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 90'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 90'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 90'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 90'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 90'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 90'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 90'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 90'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 90'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 90'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 90'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 90'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 90'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 90'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 90'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 90'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 90'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 90'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 90'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 90'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 90'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 90'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 90'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 90'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 90'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 90'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 90'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 90'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 90'd618970019642690137449562112;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] pIn;
input  [31:0] tIn_i;
output  [31:0] tIn_o;
output   tIn_o_ap_vld;
input  [31:0] tOut_i;
output  [31:0] tOut_o;
output   tOut_o_ap_vld;
input  [31:0] nx;
input  [31:0] ny;
input  [31:0] nz;
input  [31:0] Cap;
input  [31:0] Rx;
input  [31:0] Ry;
input  [31:0] Rz;
input  [31:0] dt;
input  [31:0] numiter;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] tIn_o;
reg tIn_o_ap_vld;
reg[31:0] tOut_o;
reg tOut_o_ap_vld;

(* fsm_encoding = "none" *) reg   [89:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_259_p1;
reg   [63:0] reg_281;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_270_p2;
reg   [63:0] reg_286;
wire    ap_CS_fsm_state32;
wire   [63:0] grp_fu_265_p2;
reg   [63:0] reg_292;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] reg_299;
wire    ap_CS_fsm_state49;
reg   [0:0] tIn_addr_035_reg_194;
wire   [31:0] grp_fu_239_p2;
reg   [31:0] reg_304;
reg   [31:0] reg_309;
wire    ap_CS_fsm_state50;
reg   [31:0] reg_314;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] reg_319;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] stepDivCap_reg_423;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
reg   [31:0] cw_reg_445;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] cs_reg_451;
wire   [63:0] grp_fu_262_p1;
reg   [63:0] conv4_reg_457;
reg   [31:0] cb_reg_462;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_275_p2;
reg   [63:0] mul5_reg_470;
wire   [31:0] bitcast_ln47_fu_324_p1;
wire    ap_CS_fsm_state41;
wire   [63:0] bound_fu_337_p2;
reg   [63:0] bound_reg_480;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_256_p1;
reg   [31:0] cc_reg_500;
reg   [31:0] mul1_reg_505;
reg   [31:0] mul2_reg_510;
wire   [95:0] grp_fu_350_p2;
reg   [95:0] bound4_reg_515;
wire   [30:0] i_1_fu_356_p2;
reg   [30:0] i_1_reg_520;
wire    ap_CS_fsm_state45;
wire   [95:0] add_ln30_fu_362_p2;
reg   [95:0] add_ln30_reg_526;
wire    ap_CS_fsm_state46;
wire   [31:0] bitcast_ln47_1_fu_373_p1;
reg   [31:0] bitcast_ln47_1_reg_534;
wire   [0:0] icmp_ln30_fu_368_p2;
wire   [31:0] bitcast_ln47_2_fu_379_p1;
reg   [31:0] bitcast_ln47_2_reg_541;
wire   [31:0] empty_fu_385_p3;
reg   [31:0] empty_reg_548;
wire    ap_CS_fsm_state47;
reg   [31:0] mul13_reg_553;
wire    ap_CS_fsm_state51;
wire   [31:0] add5927_fu_391_p3;
reg   [31:0] add5927_reg_558;
wire    ap_CS_fsm_state74;
reg   [0:0] tOut_addr_034_reg_182;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln54_fu_408_p2;
reg   [30:0] i_reg_208;
reg   [95:0] indvar_flatten11_reg_219;
wire    ap_CS_fsm_state89;
wire   [31:0] bitcast_ln47_3_fu_399_p1;
reg   [31:0] grp_fu_230_p0;
reg   [31:0] grp_fu_230_p1;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state85;
reg   [31:0] grp_fu_234_p0;
reg   [31:0] grp_fu_234_p1;
wire    ap_CS_fsm_state48;
reg   [31:0] grp_fu_239_p0;
reg   [31:0] grp_fu_239_p1;
reg   [31:0] grp_fu_243_p0;
reg   [31:0] grp_fu_243_p1;
reg   [31:0] grp_fu_259_p0;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
reg   [63:0] grp_fu_265_p0;
reg   [63:0] grp_fu_265_p1;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
reg   [63:0] grp_fu_270_p1;
wire    ap_CS_fsm_state23;
wire   [31:0] bound_fu_337_p0;
wire   [31:0] bound_fu_337_p1;
wire   [31:0] grp_fu_350_p0;
wire   [63:0] grp_fu_350_p1;
wire   [31:0] zext_ln27_fu_405_p1;
reg   [1:0] grp_fu_265_opcode;
reg   [89:0] ap_NS_fsm;
wire   [63:0] bound_fu_337_p00;
wire   [63:0] bound_fu_337_p10;
wire   [95:0] grp_fu_350_p00;
wire   [95:0] grp_fu_350_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 90'd1;
end

computeTempFPGA_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_230_p0),
    .din1(grp_fu_230_p1),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

computeTempFPGA_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_234_p0),
    .din1(grp_fu_234_p1),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

computeTempFPGA_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_239_p0),
    .din1(grp_fu_239_p1),
    .ce(1'b1),
    .dout(grp_fu_239_p2)
);

computeTempFPGA_fdiv_32ns_32ns_32_10_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_10_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_243_p0),
    .din1(grp_fu_243_p1),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

computeTempFPGA_fdiv_32ns_32ns_32_10_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_10_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(stepDivCap_reg_423),
    .din1(Ry),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

computeTempFPGA_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_292),
    .ce(1'b1),
    .dout(grp_fu_256_p1)
);

computeTempFPGA_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_259_p0),
    .ce(1'b1),
    .dout(grp_fu_259_p1)
);

computeTempFPGA_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cs_reg_451),
    .ce(1'b1),
    .dout(grp_fu_262_p1)
);

computeTempFPGA_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_265_p0),
    .din1(grp_fu_265_p1),
    .opcode(grp_fu_265_opcode),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

computeTempFPGA_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_281),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

computeTempFPGA_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv4_reg_457),
    .din1(64'd4611686018427387904),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

computeTempFPGA_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U12(
    .din0(bound_fu_337_p0),
    .din1(bound_fu_337_p1),
    .dout(bound_fu_337_p2)
);

computeTempFPGA_mul_32ns_64ns_96_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 96 ))
mul_32ns_64ns_96_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .ce(1'b1),
    .dout(grp_fu_350_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        i_reg_208 <= i_1_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_reg_208 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        indvar_flatten11_reg_219 <= add_ln30_reg_526;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten11_reg_219 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        tIn_addr_035_reg_194 <= tOut_addr_034_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        tIn_addr_035_reg_194 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        tOut_addr_034_reg_182 <= tIn_addr_035_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        tOut_addr_034_reg_182 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        add5927_reg_558 <= add5927_fu_391_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln30_reg_526 <= add_ln30_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        bitcast_ln47_1_reg_534 <= bitcast_ln47_1_fu_373_p1;
        bitcast_ln47_2_reg_541 <= bitcast_ln47_2_fu_379_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        bound4_reg_515 <= grp_fu_350_p2;
        cc_reg_500 <= grp_fu_256_p1;
        mul1_reg_505 <= grp_fu_234_p2;
        mul2_reg_510 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        bound_reg_480 <= bound_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cb_reg_462 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv4_reg_457 <= grp_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        cs_reg_451 <= grp_fu_250_p2;
        cw_reg_445 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        empty_reg_548 <= empty_fu_385_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_1_reg_520 <= i_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mul13_reg_553 <= grp_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul5_reg_470 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_281 <= grp_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_286 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_292 <= grp_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state49) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state49) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        reg_299 <= grp_fu_234_p2;
        reg_304 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        reg_309 <= grp_fu_234_p2;
        reg_314 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state79) | ((1'b1 == ap_CS_fsm_state69) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state69) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state64) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state64) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state59) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state59) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state54) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state54) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        reg_319 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        stepDivCap_reg_423 <= grp_fu_243_p2;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state90))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state90))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_230_p0 = add5927_reg_558;
    end else if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state80) | ((1'b1 == ap_CS_fsm_state70) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state70) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state65) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state65) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state60) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state60) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state55) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state55) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_230_p0 = reg_319;
    end else if ((((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_230_p0 = reg_299;
    end else begin
        grp_fu_230_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_fu_230_p1 = mul1_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_230_p1 = mul2_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_230_p1 = mul13_reg_553;
    end else if ((((1'b1 == ap_CS_fsm_state70) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state70) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_230_p1 = reg_314;
    end else if ((((1'b1 == ap_CS_fsm_state65) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state65) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state60) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state60) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_230_p1 = reg_309;
    end else if ((((1'b1 == ap_CS_fsm_state55) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state55) & (tIn_addr_035_reg_194 == 1'd1)) | ((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state50) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_230_p1 = reg_304;
    end else begin
        grp_fu_230_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_234_p0 = empty_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd0))) begin
        grp_fu_234_p0 = bitcast_ln47_2_reg_541;
    end else if (((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd1))) begin
        grp_fu_234_p0 = bitcast_ln47_1_reg_534;
    end else if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd0))) begin
        grp_fu_234_p0 = bitcast_ln47_2_fu_379_p1;
    end else if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd1))) begin
        grp_fu_234_p0 = bitcast_ln47_1_fu_373_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_234_p0 = cb_reg_462;
    end else begin
        grp_fu_234_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_234_p1 = cb_reg_462;
    end else if ((((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_234_p1 = cw_reg_445;
    end else if ((((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd0)) | ((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_234_p1 = cc_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_234_p1 = 32'd1117782016;
    end else begin
        grp_fu_234_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd0))) begin
        grp_fu_239_p0 = bitcast_ln47_2_reg_541;
    end else if (((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd1))) begin
        grp_fu_239_p0 = bitcast_ln47_1_reg_534;
    end else if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd0))) begin
        grp_fu_239_p0 = bitcast_ln47_2_fu_379_p1;
    end else if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd1))) begin
        grp_fu_239_p0 = bitcast_ln47_1_fu_373_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_239_p0 = stepDivCap_reg_423;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd0)) | ((1'b1 == ap_CS_fsm_state47) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_239_p1 = cb_reg_462;
    end else if ((((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd0)) | ((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (tIn_addr_035_reg_194 == 1'd1)))) begin
        grp_fu_239_p1 = cs_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_239_p1 = bitcast_ln47_fu_324_p1;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_243_p0 = stepDivCap_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_243_p0 = dt;
    end else begin
        grp_fu_243_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_243_p1 = Rz;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_243_p1 = Rx;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_243_p1 = Cap;
    end else begin
        grp_fu_243_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_259_p0 = cb_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_259_p0 = cw_reg_445;
    end else begin
        grp_fu_259_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_265_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_265_opcode = 2'd0;
    end else begin
        grp_fu_265_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_265_p0 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_265_p0 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_265_p0 = reg_286;
    end else begin
        grp_fu_265_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_265_p1 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_265_p1 = reg_286;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_265_p1 = mul5_reg_470;
    end else begin
        grp_fu_265_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_270_p1 = 64'd4613937818241073152;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_270_p1 = 64'd4611686018427387904;
    end else begin
        grp_fu_270_p1 = 'bx;
    end
end

always @ (*) begin
    if (((tOut_addr_034_reg_182 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        tIn_o = bitcast_ln47_3_fu_399_p1;
    end else begin
        tIn_o = tIn_i;
    end
end

always @ (*) begin
    if (((tOut_addr_034_reg_182 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        tIn_o_ap_vld = 1'b1;
    end else begin
        tIn_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tOut_addr_034_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
        tOut_o = bitcast_ln47_3_fu_399_p1;
    end else begin
        tOut_o = tOut_i;
    end
end

always @ (*) begin
    if (((tOut_addr_034_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
        tOut_o_ap_vld = 1'b1;
    end else begin
        tOut_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln30_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state90 : begin
            if (((icmp_ln54_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add5927_fu_391_p3 = ((tIn_addr_035_reg_194[0:0] == 1'b1) ? grp_fu_230_p2 : grp_fu_230_p2);

assign add_ln30_fu_362_p2 = (indvar_flatten11_reg_219 + 96'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign bitcast_ln47_1_fu_373_p1 = tIn_i;

assign bitcast_ln47_2_fu_379_p1 = tOut_i;

assign bitcast_ln47_3_fu_399_p1 = grp_fu_230_p2;

assign bitcast_ln47_fu_324_p1 = pIn;

assign bound_fu_337_p0 = bound_fu_337_p00;

assign bound_fu_337_p00 = ny;

assign bound_fu_337_p1 = bound_fu_337_p10;

assign bound_fu_337_p10 = nx;

assign empty_fu_385_p3 = ((tIn_addr_035_reg_194[0:0] == 1'b1) ? bitcast_ln47_1_reg_534 : bitcast_ln47_2_reg_541);

assign grp_fu_350_p0 = grp_fu_350_p00;

assign grp_fu_350_p00 = nz;

assign grp_fu_350_p1 = grp_fu_350_p10;

assign grp_fu_350_p10 = bound_reg_480;

assign i_1_fu_356_p2 = (i_reg_208 + 31'd1);

assign icmp_ln30_fu_368_p2 = ((indvar_flatten11_reg_219 == bound4_reg_515) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_408_p2 = (($signed(zext_ln27_fu_405_p1) < $signed(numiter)) ? 1'b1 : 1'b0);

assign zext_ln27_fu_405_p1 = i_1_reg_520;

endmodule //computeTempFPGA
